{"content": {"suites": {"0": {"status": {"total_pass": 21, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 6, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_call_the_ordering_api", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_mss", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_out_of_stock_quantity", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_payment_failed", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_update_check_successfully_status_4_to_5", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_update_check_failed_status_2_to_5", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_update_check_failed_status_3_to_5", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_update_check_failed_status_5_to_6", "rerun": "0"}, "8": {"status": "FAIL", "message": "           assert 400 == 200\n            +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385369410>>(2249)\n            +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385369410>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E385369410>.put_cancel_order\n       Exception: assert 400 == 200\n        +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385369410>>(2249)\n        +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385369410>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E385369410>.put_cancel_order\n", "test_name": "test_cancel_order_successfully_status_1_to_6", "rerun": "0"}, "9": {"status": "FAIL", "message": "           assert 400 == 200\n            +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C290>>(2250)\n            +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C290>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C290>.put_cancel_order\n       Exception: assert 400 == 200\n        +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C290>>(2250)\n        +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C290>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C290>.put_cancel_order\n", "test_name": "test_cancel_order_successfully_status_2_to_6", "rerun": "0"}, "10": {"status": "FAIL", "message": "           assert 400 == 200\n            +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C990>>(2251)\n            +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C990>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C990>.put_cancel_order\n       Exception: assert 400 == 200\n        +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C990>>(2251)\n        +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C990>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E38531C990>.put_cancel_order\n", "test_name": "test_cancel_order_successfully_status_3_to_6", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_order_cancel_failure_4_to_6", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_order_cancel_failure_5_to_6", "rerun": "0"}, "13": {"status": "FAIL", "message": "   KeyError: 'BuyerId'\n       Exception: Failed in-Receives_a_routing_key_and_transfers_to_rabbitMQ function,parameter: routing_key:UserCheckoutAcceptedIntegrationEvent  'BuyerId'\n", "test_name": "test_create_order_fail_with_card_type_4", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_create_order", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_create_order_and_confirmation_from_catalog", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_price_invalid", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_get_order_with_an_incorrect_order_number", "rerun": "0"}, "18": {"status": "PASS", "message": "", "test_name": "test_user_request_with_invalid_token", "rerun": "0"}, "19": {"status": "FAIL", "message": "       json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n       requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n       Exception: The function fails to connect to the API\n       Exception: The function fails to connect to the API\n", "test_name": "test_security_connect_user_for_user_another_get", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_security_connect_user_for_user_another_cancel", "rerun": "0"}, "21": {"status": "PASS", "message": "", "test_name": "test_security_connect_user_for_user_another_update", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_reliability_create_order", "rerun": "0"}, "23": {"status": "PASS", "message": "", "test_name": "test_reliability_ordering_backgroundtasks", "rerun": "0"}, "24": {"status": "FAIL", "message": "       assert (120 + 5) == 121\n", "test_name": "test_scalability_for_handling_high_volumes_of_orders", "rerun": "0"}, "25": {"status": "PASS", "message": "", "test_name": "test_Checking_100_orders_per_hour", "rerun": "0"}, "26": {"status": "PASS", "message": "", "test_name": "test_Checking_100_orders_per_hour_performence", "rerun": "0"}}, "suite_name": "tests/test_non_functional.py"}, "1": {"suite_name": "tests/test_sanity.py", "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_call_the_ordering_api", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_mss", "rerun": "0"}, "2": {"status": "PASS", "message": "", "test_name": "test_out_of_stock_quantity", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_payment_failed", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_update_check_successfully_status_4_to_5", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_update_check_failed_status_2_to_5", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_update_check_failed_status_3_to_5", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_update_check_failed_status_5_to_6", "rerun": "0"}, "8": {"status": "FAIL", "message": "           assert 400 == 200\n            +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F3050>>(2276)\n            +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F3050>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F3050>.put_cancel_order\n       Exception: assert 400 == 200\n        +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F3050>>(2276)\n        +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F3050>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F3050>.put_cancel_order\n", "test_name": "test_cancel_order_successfully_status_1_to_6", "rerun": "0"}, "9": {"status": "FAIL", "message": "           assert 400 == 200\n            +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385A1FDD0>>(2277)\n            +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385A1FDD0>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E385A1FDD0>.put_cancel_order\n       Exception: assert 400 == 200\n        +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385A1FDD0>>(2277)\n        +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E385A1FDD0>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E385A1FDD0>.put_cancel_order\n", "test_name": "test_cancel_order_successfully_status_2_to_6", "rerun": "0"}, "10": {"status": "FAIL", "message": "           assert 400 == 200\n            +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F0690>>(2278)\n            +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F0690>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F0690>.put_cancel_order\n       Exception: assert 400 == 200\n        +  where 400 = <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F0690>>(2278)\n        +    where <bound method OrderingAPI.put_cancel_order of <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F0690>> = <utils.api.ordering_api.OrderingAPI object at 0x000001E3859F0690>.put_cancel_order\n", "test_name": "test_cancel_order_successfully_status_3_to_6", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_order_cancel_failure_4_to_6", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_order_cancel_failure_5_to_6", "rerun": "0"}, "13": {"status": "FAIL", "message": "   KeyError: 'BuyerId'\n       Exception: Failed in-Receives_a_routing_key_and_transfers_to_rabbitMQ function,parameter: routing_key:UserCheckoutAcceptedIntegrationEvent  'BuyerId'\n", "test_name": "test_create_order_fail_with_card_type_4", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_create_order", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_create_order_and_confirmation_from_catalog", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_price_invalid", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_get_order_with_an_incorrect_order_number", "rerun": "0"}}, "status": {"total_pass": 14, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 4, "total_error": 0}}}}, "date": "March 18, 2023", "start_time": 1679169759.003222, "total_suite": 2, "status": "FAIL", "status_list": {"pass": "35", "fail": "10", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "45"}