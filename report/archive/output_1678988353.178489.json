{"content": {"suites": {"0": {"status": {"total_pass": 20, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 15, "total_error": 0}, "tests": {"0": {"status": "PASS", "message": "", "test_name": "test_create_order_success_flow", "rerun": "0"}, "1": {"status": "PASS", "message": "", "test_name": "test_create_order_out_of_stock_failure_flow", "rerun": "0"}, "2": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderPayment...egrationEvent'\n     - OrderPaymentFailedIntegrationEvent\n     + OrderStatusChangedToStockConfirmedIntegrationEvent\n", "test_name": "test_create_order_with_payment_failure", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_create_an_order_with_Quantity_0", "rerun": "0"}, "4": {"status": "PASS", "message": "", "test_name": "test_create_an_order_without_items_in_the_basket", "rerun": "0"}, "5": {"status": "PASS", "message": "", "test_name": "test_update_order_success_flow", "rerun": "0"}, "6": {"status": "PASS", "message": "", "test_name": "test_update_order_failure_flow_1", "rerun": "0"}, "7": {"status": "PASS", "message": "", "test_name": "test_update_order_failure_flow_2", "rerun": "0"}, "8": {"status": "PASS", "message": "", "test_name": "test_update_order_failure_flow_3", "rerun": "0"}, "9": {"status": "PASS", "message": "", "test_name": "test_update_order_failure_flow_4", "rerun": "0"}, "10": {"status": "PASS", "message": "", "test_name": "test_cancel_order_success_1", "rerun": "0"}, "11": {"status": "PASS", "message": "", "test_name": "test_cancel_order_success_2", "rerun": "0"}, "12": {"status": "PASS", "message": "", "test_name": "test_cancel_order_success_3", "rerun": "0"}, "13": {"status": "PASS", "message": "", "test_name": "test_cancel_order_failure_1", "rerun": "0"}, "14": {"status": "PASS", "message": "", "test_name": "test_cancel_order_failure_2", "rerun": "0"}, "15": {"status": "PASS", "message": "", "test_name": "test_track_of_an_order_success_flow_1", "rerun": "0"}, "16": {"status": "PASS", "message": "", "test_name": "test_track_of_an_order_success_flow_2", "rerun": "0"}, "17": {"status": "PASS", "message": "", "test_name": "test_track_of_an_order_success_flow_3", "rerun": "0"}, "18": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n     + OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  ++++++++ +++++\n", "test_name": "test_track_of_an_order_success_flow_4", "rerun": "0"}, "19": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  -------- -----\n     + OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n", "test_name": "test_track_of_an_order_success_flow_5", "rerun": "0"}, "20": {"status": "PASS", "message": "", "test_name": "test_track_of_an_order_success_flow_6", "rerun": "0"}, "21": {"status": "FAIL", "message": "   AssertionError: assert 200 == 400\n    +  where 200 = <Response [200]>.status_code\n    +  and   400 = int('400')\n    +    where '400' = <function getenv at 0x000001E83D0704C0>('STATUS_CODE_400')\n    +      where <function getenv at 0x000001E83D0704C0> = os.getenv\n", "test_name": "test_authentication_success_flow_1", "rerun": "0"}, "22": {"status": "PASS", "message": "", "test_name": "test_authentication_success_flow_2", "rerun": "0"}, "23": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n     + OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  ++++++++ +++++\n", "test_name": "test_authentication_success_flow_3", "rerun": "0"}, "24": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  -------- -----\n     + OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n", "test_name": "test_authentication_success_flow_4", "rerun": "0"}, "25": {"status": "FAIL", "message": "       AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n         - OrderStatusChangedToPaidIntegrationEvent\n         ?                     ^\n         + OrderStatusChangedToAwaitingValidationIntegrationEvent\n         ?                     ^^  ++++++++ +++++\n", "test_name": "test_create_100_orders", "rerun": "0"}, "26": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  -------- -----\n     + OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n", "test_name": "test_system_recovery_success_flow_1", "rerun": "0"}, "27": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n     + OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  ++++++++ +++++\n", "test_name": "test_system_recovery_success_flow_2", "rerun": "0"}, "28": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  -------- -----\n     + OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n", "test_name": "test_system_recovery_success_flow_3", "rerun": "0"}, "29": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n     + OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  ++++++++ +++++\n", "test_name": "test_system_recovery_failure_flow_1", "rerun": "0"}, "30": {"status": "FAIL", "message": "   AssertionError: assert 'OrderStatusC...egrationEvent' == 'OrderStatusC...egrationEvent'\n     - OrderStatusChangedToAwaitingValidationIntegrationEvent\n     ?                     ^^  -------- -----\n     + OrderStatusChangedToPaidIntegrationEvent\n     ?                     ^\n", "test_name": "test_system_recovery_failure_flow_2", "rerun": "0"}, "31": {"status": "FAIL", "message": "       pika.exceptions.ChannelClosedByBroker: (404, \"NOT_FOUND - no queue 'BASKET' in vhost '/'\")\n", "test_name": "test_authentication_success_flow_1_bob_user", "rerun": "0"}, "32": {"status": "PASS", "message": "", "test_name": "test_authentication_success_flow_2_bob_user", "rerun": "0"}, "33": {"status": "FAIL", "message": "   AssertionError: assert 200 == 400\n    +  where 200 = <Response [200]>.status_code\n    +  and   400 = int('400')\n    +    where '400' = <function getenv at 0x000001E83D0704C0>('STATUS_CODE_400')\n    +      where <function getenv at 0x000001E83D0704C0> = os.getenv\n", "test_name": "test_authentication_success_flow_3_bob_user", "rerun": "0"}, "34": {"status": "FAIL", "message": "   AssertionError: assert 200 == 400\n    +  where 200 = <Response [200]>.status_code\n    +  and   400 = int('400')\n    +    where '400' = <function getenv at 0x000001E83D0704C0>('STATUS_CODE_400')\n    +      where <function getenv at 0x000001E83D0704C0> = os.getenv\n", "test_name": "test_authentication_success_flow_4_bob_user", "rerun": "0"}}, "suite_name": "tests/test_eshop.py"}}}, "date": "March 15, 2023", "start_time": 1678892859.127554, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "20", "fail": "15", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "35"}